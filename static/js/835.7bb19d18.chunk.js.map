{"version":3,"file":"static/js/835.7bb19d18.chunk.js","mappings":"kNAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAV,EAEtBC,EAAc,SAAAF,GAAK,OAAIA,EAAMG,QAAQC,IAAlB,EAEnBC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,qECKrBC,EAAc,WACzB,IAAMC,GAASC,EAAAA,EAAAA,IAAO,GAChBC,GAAWD,EAAAA,EAAAA,IAAO,GAChBR,GAAaU,EAAAA,EAAAA,IAAYZ,GAAzBE,SACR,GAA4BW,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MA6BXC,EAAQ,WACZL,EAAY,IACZE,EAAU,GACX,EAED,OACE,+BACE,iBAAMI,SA1BW,SAAAC,GAGnB,GAFAC,QAAQC,IAAItB,GACZoB,EAAEG,iBACEvB,EAAU,CACZ,GACEA,EAASwB,MACP,SAAAC,GAAO,OAAIA,EAAQb,KAAKc,gBAAkBd,EAAKc,aAAxC,IAGT,OAAOC,MAAM,GAAD,OAAIf,EAAJ,6BAEdI,GAASY,EAAAA,EAAAA,IAAW,CAAEhB,KAAAA,EAAME,OAAAA,KAC5BO,QAAQC,IAAI,CAAEV,KAAAA,EAAME,OAAAA,IACpBI,GACD,CAGF,EASiCW,aAAa,MAA3C,UACE,UAAC,KAAD,CAAMC,MAAM,SAASC,QAAQ,SAASC,IAAK,EAA3C,WACE,UAAC,KAAD,CAAMC,QAAQ,SAASD,IAAK,EAA5B,WACE,mBAAOE,QAAS3B,EAAhB,WACE,SAAC,KAAD,oBACA,SAAC,KAAD,CACE4B,KAAK,OACLvB,KAAK,OACLwB,MAAOxB,EACPyB,GAAI9B,EACJ+B,YAAY,OACZC,GAAG,QACHC,YAAY,YACZC,MAAM,OACNC,QAAQ,UACRC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SApDW,SAAA1B,GACvBP,EAAYO,EAAE2B,OAAOX,MACtB,QAqDS,mBAAOF,QAASzB,EAAhB,WACE,SAAC,KAAD,sBACA,SAAC,KAAD,CACE0B,KAAK,MACLvB,KAAK,SACLwB,MAAOtB,EACPuB,GAAI5B,EACJ8B,GAAG,QACHC,YAAY,YACZC,MAAM,OACNC,QAAQ,UACRJ,YAAY,SACZK,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAlEa,SAAA1B,GACzBL,EAAUK,EAAE2B,OAAOX,MACpB,WAoEO,mBAAQD,KAAK,SAAb,UACE,SAAC,KAAD,CAAWa,EAAG,EAAGC,EAAG,YAM/B,E,UC1FYC,EAAS,WACpB,IAAMd,GAAQ1B,EAAAA,EAAAA,IAAYT,GAEpBe,GAAWC,EAAAA,EAAAA,MAKXkC,GAAW3C,EAAAA,EAAAA,IAAO,GACxB,OACE,UAAC,KAAD,CAAMsB,MAAM,SAASC,QAAQ,SAASC,IAAK,EAA3C,WACE,kBAAOE,QAASiB,EAAhB,UACE,SAAC,KAAD,CACEhB,KAAK,OACLG,YAAY,aACZC,GAAG,QACHC,YAAY,YACZC,MAAM,OACNC,QAAQ,UACRN,MAAOA,EACPU,SAhBe,SAAA1B,GACrBJ,GAASoC,EAAAA,EAAAA,IAAchC,EAAEiC,cAAcjB,OACxC,EAeOC,GAAIc,OAGR,mBAAQhB,KAAK,SAAb,UACE,SAAC,KAAD,CAAaa,EAAG,EAAGC,EAAG,QAI7B,E,oBC7BYK,EAAU,SAAC,GAA0B,IAAxBjB,EAAuB,EAAvBA,GAAIzB,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC5BE,GAAWC,EAAAA,EAAAA,MAEXsC,EAAY,OAASzC,EAE3B,OACE,UAAC,KAAD,CAAMgB,MAAM,SAASC,QAAQ,gBAA7B,WACE,UAAC,KAAD,CAAMD,MAAM,SAASE,IAAK,EAA1B,WACE,SAAC,KAAD,CAAMwB,GAAIC,EAAAA,IAAuBT,EAAG,GAAIC,EAAG,MAE3C,0BACE,UAAC,KAAD,CAAMS,SAAS,OAAOF,GAAG,IAAzB,mBACS5C,EADT,KACe,0CAAkBE,cAKrC,UAAC,KAAD,CAAMkB,IAAK,EAAX,WACE,cAAG2B,KAAMJ,EAAT,UACE,SAAC,KAAD,CAAWP,EAAG,EAAGC,EAAG,OAGtB,mBAAQd,KAAK,SAASyB,QApBP,kBAAM5C,GAAS6C,EAAAA,EAAAA,IAAcxB,GAA7B,EAoBf,UACE,SAAC,KAAD,CAAYW,EAAG,EAAGC,EAAG,WAK9B,E,UC5BYa,EAAc,WACzB,IAAMC,GAASrD,EAAAA,EAAAA,IAAYT,GAC3B,GAAuCS,EAAAA,EAAAA,IAAYZ,GAA3CE,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,UAAW2D,EAA7B,EAA6BA,MAEvBhD,GAAWC,EAAAA,EAAAA,OACjBgD,EAAAA,EAAAA,YAAU,WACRjD,GAASkD,EAAAA,EAAAA,MACV,GAAE,CAAClD,IAEJ,IAAMmD,EAAaJ,EAAOK,oBAKpBC,GAJc,OAAGrE,QAAH,IAAGA,OAAH,EAAGA,EAAU+D,QAAO,SAAAtC,GAAO,OAC7CA,EAAQb,KAAKwD,oBAAoBE,SAASH,EADG,KAIVI,MAAK,SAACC,EAAcC,GAAf,OACxCD,EAAa5D,KAAK8D,cAAcD,EAAc7D,KADN,IAI1C,OACE,0BACGP,IAAa,SAACsE,EAAA,EAAD,IACbX,IAAS,uBAAIA,IACbhE,GACCqE,EAAcO,KAAI,gBAAGvC,EAAH,EAAGA,GAAIzB,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OAChB,yBACE,SAACwC,EAAD,CAASjB,GAAIA,EAAIzB,KAAMA,EAAME,OAAQA,KAD9BuB,EADO,MAOzB,EC5Bc,SAASwC,IACtB,IAAM7D,GAAWC,EAAAA,EAAAA,MACXZ,GAAYK,EAAAA,EAAAA,IAAYN,GAM9B,OAJA6D,EAAAA,EAAAA,YAAU,WACRjD,GAASkD,EAAAA,EAAAA,MACV,GAAE,CAAClD,KAGF,iCACE,yBAAMX,GAAa,4BACnB,SAAC,KAAD,CAAMyB,MAAM,SAASC,QAAQ,SAAS+C,GAAI,EAA1C,UACE,SAAC,KAAD,CAAMtB,GAAG,IAAIE,SAAS,OAAtB,gCAIF,SAACpD,EAAD,KACA,SAAC,KAAD,CAAMwB,MAAM,SAASC,QAAQ,SAAS+C,GAAI,EAA1C,UACE,SAAC,KAAD,CAAMtB,GAAG,IAAIE,SAAS,OAAtB,6BAIF,SAACR,EAAD,KACA,SAAC,KAAD,CAAMpB,MAAM,SAASC,QAAQ,SAAS+C,GAAI,EAA1C,UACE,SAAC,KAAD,CAAMtB,GAAG,IAAIE,SAAS,OAAtB,8BAIF,SAACI,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectValue = state => state.filters.text;\n\nexport const selectLoading = state => state.contacts.isLoading;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Flex, Input, Text } from '@chakra-ui/react';\nimport { CheckIcon } from '@chakra-ui/icons';\n\nexport const ContactForm = () => {\n  const nameId = nanoid(3);\n  const numberId = nanoid(3);\n  const { contacts } = useSelector(selectContacts);\n  const [name, setNameForm] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChangeName = e => {\n    setNameForm(e.target.value);\n  };\n\n  const handleChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    console.log(contacts);\n    e.preventDefault();\n    if (contacts) {\n      if (\n        contacts.find(\n          contact => contact.name.toLowerCase() === name.toLowerCase()\n        )\n      ) {\n        return alert(`${name} is already in contacts.`);\n      }\n      dispatch(addContact({ name, number }));\n      console.log({ name, number });\n      reset();\n    }\n\n    return;\n  };\n\n  const reset = () => {\n    setNameForm('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Flex align=\"center\" justify=\"center\" gap={7}>\n          <Flex flexDir=\"column\" gap={3}>\n            <label htmlFor={nameId}>\n              <Text>Name</Text>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                id={nameId}\n                placeholder=\"Name\"\n                pr=\"10rem\"\n                borderColor=\"green.200\"\n                width=\"auto\"\n                variant=\"flushed\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                onChange={handleChangeName}\n              />\n            </label>\n            <label htmlFor={numberId}>\n              <Text>Number</Text>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                id={numberId}\n                pr=\"10rem\"\n                borderColor=\"green.200\"\n                width=\"auto\"\n                variant=\"flushed\"\n                placeholder=\"Number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                onChange={handleChangeNumber}\n              />\n            </label>\n          </Flex>\n          <button type=\"submit\">\n            <CheckIcon w={6} h={6} />\n          </button>\n        </Flex>\n      </form>\n    </>\n  );\n};\n","import React from 'react';\nimport { setTextFilter } from 'redux/contacts/slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { selectValue } from 'redux/contacts/selectors';\nimport { Flex, Input } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nexport const Filter = () => {\n  const value = useSelector(selectValue);\n\n  const dispatch = useDispatch();\n  const filretContacts = e => {\n    dispatch(setTextFilter(e.currentTarget.value));\n  };\n\n  const filterId = nanoid(3);\n  return (\n    <Flex align=\"center\" justify=\"center\" gap={7}>\n      <label htmlFor={filterId}>\n        <Input\n          type=\"text\"\n          placeholder=\"Input name\"\n          pr=\"10rem\"\n          borderColor=\"green.200\"\n          width=\"auto\"\n          variant=\"flushed\"\n          value={value}\n          onChange={filretContacts}\n          id={filterId}\n        />\n      </label>\n      <button type=\"submit\">\n        <Search2Icon w={6} h={6} />\n      </button>\n    </Flex>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { IoPeopleCircleOutline } from 'react-icons/io5';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Flex, Icon, Text } from '@chakra-ui/react';\nimport { DeleteIcon, PhoneIcon } from '@chakra-ui/icons';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  const telNumber = 'tel:' + number;\n\n  return (\n    <Flex align=\"center\" justify=\"space-between\">\n      <Flex align=\"center\" gap={4}>\n        <Icon as={IoPeopleCircleOutline} w={12} h={12}></Icon>\n\n        <div>\n          <Text fontSize=\"18px\" as=\"i\">\n            Name: {name} <p>Phone number: {number}</p>\n          </Text>\n        </div>\n      </Flex>\n\n      <Flex gap={5}>\n        <a href={telNumber}>\n          <PhoneIcon w={6} h={6} />\n        </a>\n\n        <button type=\"button\" onClick={handleDelete}>\n          <DeleteIcon w={6} h={6} />\n        </button>\n      </Flex>\n    </Flex>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { Contact } from 'components/Contact/Contact';\nimport { selectContacts, selectValue } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const filter = useSelector(selectValue);\n  const { contacts, isLoading, error } = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const normalized = filter.toLocaleLowerCase();\n  const contactsFilter = contacts?.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalized)\n  );\n\n  const contactsState = contactsFilter.sort((firstContact, secondContact) =>\n    firstContact.name.localeCompare(secondContact.name)\n  );\n\n  return (\n    <ul>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {contacts &&\n        contactsState.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n    </ul>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Text, Flex } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Flex align=\"center\" justify=\"center\" my={5}>\n        <Text as=\"b\" fontSize=\"18px\">\n          Add new contact\n        </Text>\n      </Flex>\n      <ContactForm />\n      <Flex align=\"center\" justify=\"center\" my={7}>\n        <Text as=\"b\" fontSize=\"18px\">\n          Find contact\n        </Text>\n      </Flex>\n      <Filter />\n      <Flex align=\"center\" justify=\"center\" my={7}>\n        <Text as=\"b\" fontSize=\"18px\">\n          Your contacts\n        </Text>\n      </Flex>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectValue","filters","text","selectLoading","isLoading","ContactForm","nameId","nanoid","numberId","useSelector","useState","name","setNameForm","number","setNumber","dispatch","useDispatch","reset","onSubmit","e","console","log","preventDefault","find","contact","toLowerCase","alert","addContact","autoComplete","align","justify","gap","flexDir","htmlFor","type","value","id","placeholder","pr","borderColor","width","variant","pattern","title","required","onChange","target","w","h","Filter","filterId","setTextFilter","currentTarget","Contact","telNumber","as","IoPeopleCircleOutline","fontSize","href","onClick","deleteContact","ContactList","filter","error","useEffect","fetchContacts","normalized","toLocaleLowerCase","contactsState","includes","sort","firstContact","secondContact","localeCompare","Loader","map","Contacts","my"],"sourceRoot":""}